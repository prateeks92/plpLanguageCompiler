/* *
 * Scanner for the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Fall 2017.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Fall 2017 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2017
  */

package cop5556fa17;

import java.awt.print.Printable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Iterator;
import java.util.Set;

public class Scanner {

	@SuppressWarnings("serial")
	public static class LexicalException extends Exception {

		int pos;

		public LexicalException(String message, int pos) {
			super(message);
			this.pos = pos;
		}

		public int getPos() {
			return pos;
		}

	}

	public static enum Kind {
		IDENTIFIER, INTEGER_LITERAL, BOOLEAN_LITERAL, STRING_LITERAL, 
		KW_x/* x */, KW_X/* X */, KW_y/* y */, KW_Y/* Y */, KW_r/* r */, KW_R/* R */, KW_a/* a */, 
		KW_A/* A */, KW_Z/* Z */, KW_DEF_X/* DEF_X */, KW_DEF_Y/* DEF_Y */, KW_SCREEN/* SCREEN */, 
		KW_cart_x/* cart_x */, KW_cart_y/* cart_y */, KW_polar_a/* polar_a */, KW_polar_r/* polar_r */, 
		KW_abs/* abs */, KW_sin/* sin */, KW_cos/* cos */, KW_atan/* atan */, KW_log/* log */, 
		KW_image/* image */,  KW_int/* int */, 
		KW_boolean/* boolean */, KW_url/* url */, KW_file/* file */, OP_ASSIGN/* = */, OP_GT/* > */, OP_LT/* < */, 
		OP_EXCL/* ! */, OP_Q/* ? */, OP_COLON/* : */, OP_EQ/* == */, OP_NEQ/* != */, OP_GE/* >= */, OP_LE/* <= */, 
		OP_AND/* & */, OP_OR/* | */, OP_PLUS/* + */, OP_MINUS/* - */, OP_TIMES/* * */, OP_DIV/* / */, OP_MOD/* % */, 
		OP_POWER/* ** */, OP_AT/* @ */, OP_RARROW/* -> */, OP_LARROW/* <- */, LPAREN/* ( */, RPAREN/* ) */, 
		LSQUARE/* [ */, RSQUARE/* ] */, SEMI/* ; */, COMMA/* , */, EOF;
	}
	
	/**
	 * Class to represent Tokens.
	 * 
	 * This is defined as a (non-static) inner class which means that each Token
	 * instance is associated with a specific Scanner instance. We use this when
	 * some token methods access the chars array in the associated Scanner.
	 * 
	 * 
	 * @author Beverly Sanders
	 *
	 */
	public class Token {
		public final Kind kind;
		public final int pos;
		public final int length;
		public final int line;
		public final int pos_in_line;

		public Token(Kind kind, int pos, int length, int line, int pos_in_line) {
			super();
			this.kind = kind;
			this.pos = pos;
			this.length = length;
			this.line = line;
			this.pos_in_line = pos_in_line;
		}

		public String getText() {
			if (kind == Kind.STRING_LITERAL) {
				return chars2String(chars, pos, length);
			} else
				return String.copyValueOf(chars, pos, length);
		}

		/**
		 * To get the text of a StringLiteral, we need to remove the enclosing "
		 * characters and convert escaped characters to the represented character. For
		 * example the two characters \ t in the char array should be converted to a
		 * single tab character in the returned String
		 * 
		 * @param chars
		 * @param pos
		 * @param length
		 * @return
		 */
		private String chars2String(char[] chars, int pos, int length) {
			StringBuilder sb = new StringBuilder();
			for (int i = pos + 1; i < pos + length - 1; ++i) {// omit initial and final "
				char ch = chars[i];
				if (ch == '\\') { // handle escape
					i++;
					ch = chars[i];
					switch (ch) {
					case 'b':
						sb.append('\b');
						break;
					case 't':
						sb.append('\t');
						break;
					case 'f':
						sb.append('\f');
						break;
					case 'r':
						sb.append('\r'); // for completeness, line termination chars not allowed in String literals
						break;
					case 'n':
						sb.append('\n'); // for completeness, line termination chars not allowed in String literals
						break;
					case '\"':
						sb.append('\"');
						break;
					case '\'':
						sb.append('\'');
						break;
					case '\\':
						sb.append('\\');
						break;
					default:
						assert false;
						break;
					}
				} else {
					sb.append(ch);
				}
			}
			return sb.toString();
		}

		/**
		 * precondition: This Token is an INTEGER_LITERAL
		 * 
		 * @returns the integer value represented by the token
		 */
		public int intVal() {
			assert kind == Kind.INTEGER_LITERAL;
			return Integer.valueOf(String.copyValueOf(chars, pos, length));
		}

		public String toString() {
			return "[" + kind + "," + String.copyValueOf(chars, pos, length) + "," + pos + "," + length + "," + line
					+ "," + pos_in_line + "]";
		}

		/**
		 * Since we overrode equals, we need to override hashCode.
		 * https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-
		 * 
		 * Both the equals and hashCode method were generated by eclipse
		 * 
		 */
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + ((kind == null) ? 0 : kind.hashCode());
			result = prime * result + length;
			result = prime * result + line;
			result = prime * result + pos;
			result = prime * result + pos_in_line;
			return result;
		}

		/**
		 * Override equals method to return true if other object is the same class and
		 * all fields are equal.
		 * 
		 * Overriding this creates an obligation to override hashCode.
		 * 
		 * Both hashCode and equals were generated by eclipse.
		 * 
		 */
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Token other = (Token) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (kind != other.kind)
				return false;
			if (length != other.length)
				return false;
			if (line != other.line)
				return false;
			if (pos != other.pos)
				return false;
			if (pos_in_line != other.pos_in_line)
				return false;
			return true;
		}

		/**
		 * used in equals to get the Scanner object this Token is associated with.
		 * 
		 * @return
		 */
		private Scanner getOuterType() {
			return Scanner.this;
		}

	}

	/**
	 * Extra character added to the end of the input characters to simplify the
	 * Scanner.
	 */
	static final char EOFchar = 0;

	/**
	 * The list of tokens created by the scan method.
	 */
	final ArrayList<Token> tokens;

	/**
	 * An array of characters representing the input. These are the characters from
	 * the input string plus and additional EOFchar at the end.
	 */
	final char[] chars;

	/**
	 * position of the next token to be returned by a call to nextToken
	 */
	private int nextTokenPos = 0;

	Scanner(String inputString) {
		int numChars = inputString.length();
		this.chars = Arrays.copyOf(inputString.toCharArray(), numChars + 1); // input string terminated with null char
		chars[numChars] = EOFchar;
		tokens = new ArrayList<Token>();
	}

	/**
	 * Method to scan the input and create a list of Tokens.
	 * 
	 * If an error is encountered during scanning, throw a LexicalException.
	 * 
	 * @return
	 * @throws LexicalException
	 */

	public static HashMap<String, Kind> KWmap = new HashMap<String, Kind>();

	public Scanner scan() throws LexicalException {
		KWmap.put("x", Kind.KW_x);
		KWmap.put("X", Kind.KW_X);
		KWmap.put("y", Kind.KW_y);
		KWmap.put("Y", Kind.KW_Y);
		KWmap.put("r", Kind.KW_r);
		KWmap.put("R", Kind.KW_R);
		KWmap.put("a", Kind.KW_a);
		KWmap.put("A", Kind.KW_A);
		KWmap.put("Z", Kind.KW_Z);
		KWmap.put("DEF_X", Kind.KW_DEF_X);
		KWmap.put("DEF_Y", Kind.KW_DEF_Y);
		KWmap.put("cart_x", Kind.KW_cart_x);
		KWmap.put("cart_y", Kind.KW_cart_y);
		KWmap.put("polar_a", Kind.KW_polar_a);
		KWmap.put("polar_r", Kind.KW_polar_r);
		KWmap.put("abs", Kind.KW_abs);
		KWmap.put("sin", Kind.KW_sin);
		KWmap.put("cos", Kind.KW_cos);
		KWmap.put("atan", Kind.KW_atan);
		KWmap.put("log", Kind.KW_log);
		KWmap.put("image", Kind.KW_image);
		KWmap.put("int", Kind.KW_int);
		KWmap.put("boolean", Kind.KW_boolean);
		KWmap.put("url", Kind.KW_url);
		KWmap.put("file", Kind.KW_file);
		KWmap.put("SCREEN", Kind.KW_SCREEN);
		KWmap.put("true", Kind.BOOLEAN_LITERAL);
		KWmap.put("false", Kind.BOOLEAN_LITERAL);

		/* TODO Replace this with a correct and complete implementation!!! */
		int pos = 0, spos = 0;
		int line = 1;
		int posInLine = 1;

		boolean doubleQuote = false;
		char CurrChar = chars[pos];
		while (CurrChar != EOFchar) {
			if (Character.isDigit(CurrChar)) {
				if (CurrChar == '0') {
					tokens.add(new Token(Kind.INTEGER_LITERAL, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
				} else {
					spos = pos;
					String s = "";
					while (Character.isDigit(CurrChar) && CurrChar != EOFchar) {
						s = s + CurrChar;
						pos += 1;
						CurrChar = chars[pos];
					}
					try {
						int x = Integer.parseInt(s);
					} catch (Exception e) {
						throw new LexicalException("Integer Too Large", spos);
					}
					tokens.add(new Token(Kind.INTEGER_LITERAL, spos, pos - spos, line, posInLine));
					posInLine += pos - spos;
				}
			} else if (Character.isJavaIdentifierStart(CurrChar)) {
				spos = pos;
				String s = "";
				while (Character.isLetterOrDigit(CurrChar) || CurrChar == '$' || CurrChar == '_') {// CurrChar !=
																									// EOFchar &&
																									// CurrChar != '0'
																									// &&
																									// Character.isJavaIdentifierPart((int)CurrChar))
																									// {
					s = s + CurrChar;
					pos += 1;
					CurrChar = chars[pos];
					System.out.println(CurrChar);
				}

				Kind k = KWmap.get(s);

				if (k != null) {
					tokens.add(new Token(k, spos, pos - spos, line, posInLine));
					posInLine += s.toString().length();
				} else {
					tokens.add(new Token(Kind.IDENTIFIER, spos, pos - spos, line, posInLine));
					posInLine += s.toString().length();
				}
			} else {
				switch (CurrChar) {
				case ';':
					tokens.add(new Token(Kind.SEMI, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case '\n':
				case '\r':
					if (CurrChar == '\r' && chars[pos + 1] == '\n')
						pos += 1;
					pos += 1;
					posInLine = 1;
					line += 1;
					break;

				case ' ':
				case '\t':
				case '\f':
					pos += 1;
					posInLine += 1;
					break;

				case '\\':
					throw new LexicalException("Illegal \\ outside string literal", pos);
					/*
					 * pos += 1; posInLine += 1; break;
					 */
				case '\b':
					throw new LexicalException("Illegal \b outside string literal", pos);

				case '\"':
					doubleQuote = true;
					spos = pos;
					while (doubleQuote && chars[pos] != EOFchar) {
						pos += 1;
						CurrChar = chars[pos];

						if (CurrChar == '\\') {
							if (chars[pos + 1] == 'b' || chars[pos + 1] == 't' || chars[pos + 1] == 'n'
									|| chars[pos + 1] == 'f' || chars[pos + 1] == 'r' || chars[pos + 1] == '\"'
									|| chars[pos + 1] == '\\' || chars[pos + 1] == '\'') {
								pos += 1;
							} else
								throw new LexicalException("Invalid character in string", pos + 1);
						} else if (CurrChar == '\n')
							throw new LexicalException("Invalid newline in string", pos);
						else if (CurrChar == '\"') {
							doubleQuote = false;
							pos += 1;
						}
					}

					if (doubleQuote)
						throw new LexicalException("lonely double quote", pos);
					else {
						tokens.add(new Token(Kind.STRING_LITERAL, spos, pos - spos, line, posInLine));
						posInLine += pos - spos;
					}
					break;

				case '\'':
					/*
					 * singleQuote = true;
					 * 
					 * while (singleQuote && chars[pos] != EOFchar) { pos += 1; posInLine += 1;
					 * CurrChar = chars[pos];
					 * 
					 * if (CurrChar == '\'') singleQuote = false; }
					 * 
					 * if (singleQuote)
					 */ throw new LexicalException("lonely single quote", pos);
					// break;

				case '=':
					if (chars[pos + 1] == '=') {
						tokens.add(new Token(Kind.OP_EQ, pos, 2, line, posInLine));
						pos += 2;
						posInLine += 2;
					} else {
						tokens.add(new Token(Kind.OP_ASSIGN, pos, 1, line, posInLine));
						pos += 1;
						posInLine += 1;
					}
					break;

				case '>':
					if (chars[pos + 1] == '=') {
						tokens.add(new Token(Kind.OP_GE, pos, 2, line, posInLine));
						pos += 2;
						posInLine += 2;
					} else {
						tokens.add(new Token(Kind.OP_GT, pos, 1, line, posInLine));
						pos += 1;
						posInLine += 1;
					}
					break;

				case '<':
					if (chars[pos + 1] == '=') {
						tokens.add(new Token(Kind.OP_LE, pos, 2, line, posInLine));
						pos += 2;
						posInLine += 2;
					} else {
						if (chars[pos + 1] == '-') {
							tokens.add(new Token(Kind.OP_LARROW, pos, 2, line, posInLine));
							pos += 2;
							posInLine += 2;
						} else {
							tokens.add(new Token(Kind.OP_LT, pos, 1, line, posInLine));
							pos += 1;
							posInLine += 1;
						}
					}
					break;

				case '!':
					if (chars[pos + 1] == '=') {
						tokens.add(new Token(Kind.OP_NEQ, pos, 2, line, posInLine));
						pos += 2;
						posInLine += 2;
					} else {
						tokens.add(new Token(Kind.OP_EXCL, pos, 1, line, posInLine));
						pos += 1;
						posInLine += 1;
					}
					break;

				case '?':
					tokens.add(new Token(Kind.OP_Q, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case ':':
					tokens.add(new Token(Kind.OP_COLON, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case '&':
					tokens.add(new Token(Kind.OP_AND, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case '|':
					tokens.add(new Token(Kind.OP_OR, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case '+':
					tokens.add(new Token(Kind.OP_PLUS, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case '/':
					if (chars[pos + 1] == '/') {
						CurrChar = chars[pos];

						while (CurrChar != '\n' && CurrChar != '\r' && CurrChar != EOFchar) {
							pos += 1;
							CurrChar = chars[pos];
						}
						posInLine += pos;
					} else {
						tokens.add(new Token(Kind.OP_DIV, pos, 1, line, posInLine));
						pos += 1;
						posInLine += 1;
					}
					break;

				case '%':
					tokens.add(new Token(Kind.OP_MOD, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case '@':
					tokens.add(new Token(Kind.OP_AT, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case '(':
					tokens.add(new Token(Kind.LPAREN, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case ')':
					tokens.add(new Token(Kind.RPAREN, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case '[':
					tokens.add(new Token(Kind.LSQUARE, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case ']':
					tokens.add(new Token(Kind.RSQUARE, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case ',':
					tokens.add(new Token(Kind.COMMA, pos, 1, line, posInLine));
					pos += 1;
					posInLine += 1;
					break;

				case '-':
					if (chars[pos + 1] == '>') {
						tokens.add(new Token(Kind.OP_RARROW, pos, 2, line, posInLine));
						pos += 2;
						posInLine += 2;
					} else {
						tokens.add(new Token(Kind.OP_MINUS, pos, 1, line, posInLine));
						pos += 1;
						posInLine += 1;
					}
					break;

				case '*':
					if (chars[pos + 1] == '*') {
						tokens.add(new Token(Kind.OP_POWER, pos, 2, line, posInLine));
						pos += 2;
						posInLine += 2;
					} else {
						tokens.add(new Token(Kind.OP_TIMES, pos, 1, line, posInLine));
						pos += 1;
						posInLine += 1;
					}
					break;

				default:
					throw new LexicalException("Illegal Character", pos);
				}
			}
			CurrChar = chars[pos];
		}

		if (CurrChar == EOFchar) {
			tokens.add(new Token(Kind.EOF, pos, 0, line, posInLine));
		}
		return this;

	}

	/**
	 * Returns true if the internal interator has more Tokens
	 * 
	 * @return
	 */
	public boolean hasTokens() {
		return nextTokenPos < tokens.size();
	}

	/**
	 * Returns the next Token and updates the internal iterator so that the next
	 * call to nextToken will return the next token in the list.
	 * 
	 * It is the callers responsibility to ensure that there is another Token.
	 * 
	 * Precondition: hasTokens()
	 * 
	 * @return
	 */
	public Token nextToken() {
		return tokens.get(nextTokenPos++);
	}

	/**
	 * Returns the next Token, but does not update the internal iterator. This means
	 * that the next call to nextToken or peek will return the same Token as
	 * returned by this methods.
	 * 
	 * It is the callers responsibility to ensure that there is another Token.
	 * 
	 * Precondition: hasTokens()
	 * 
	 * @return next Token.
	 */
	public Token peek() {
		return tokens.get(nextTokenPos);
	}

	/**
	 * Resets the internal iterator so that the next call to peek or nextToken will
	 * return the first Token.
	 */
	public void reset() {
		nextTokenPos = 0;
	}

	/**
	 * Returns a String representation of the list of Tokens
	 */
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("Tokens:\n");
		for (int i = 0; i < tokens.size(); i++) {
			sb.append(tokens.get(i)).append('\n');
		}
		return sb.toString();
	}
}
